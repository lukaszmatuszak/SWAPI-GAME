{"version":3,"sources":["core/i18n/locales/index.ts","core/i18n/locales/en.ts","core/i18n/locales/pl.ts","core/i18n/i18n.ts","interfaces/Status.ts","components/ChangeLanguageMenu/ChangeLanguageMenu.tsx","components/TopBar/TopBar.tsx","components/Layout/Layout.tsx","views/HomeView/resources.ts","components/ResourceTile/ResourceTile.tsx","views/HomeView/HomeView.tsx","components/DetailsTile/DetailsTile.tsx","core/utils.ts","core/urls/ApiUrls.ts","components/Battleground/Battleground.tsx","components/Battleground/utils.ts","hooks/useFetch.ts","components/Spinner/Spinner.tsx","views/CharactersArenaView/CharactersArenaView.tsx","views/StarshipsArenaView/StarshipsArenaView.tsx","views/Views.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["en","Common","pl","i18n","use","initReactI18next","LanguageDetector","init","whitelist","ns","defaultNS","resources","locales","fallbackLng","interpolation","escapeValue","Status","ChangeLanguageMenu","useTranslation","useState","language","selectedLng","setSelectedLng","FormControl","component","RadioGroup","aria-label","name","value","onChange","event","target","changeLanguage","row","FormControlLabel","control","Radio","label","labelPlacement","TopBar","AppBar","position","Toolbar","variant","Box","flexGrow","to","Typography","color","Layout","children","height","RESOURCES","iconSrc","title","iconAlt","redirect","ResourceTile","resource","t","Card","CardContent","Grid","container","alignItems","item","xs","width","src","alt","HomeView","pb","pt","align","spacing","justify","map","key","colors","draw","looser","winner","FullWidthGrid","styled","StatusTypography","status","textTransform","RotatedImg","transform","DetailsTile","playerStatus","direction","data-test","crew","mass","ApiUrls","getRandomInteger","max","Math","floor","random","Battleground","contestants","playerOne","score","playerTwo","gameStatus","setGameStatus","defineStatus","firstChallenger","secondChallenger","Number","DRAW","WINNER","LOOSER","defineStatusForStarship","defineStatusForCharacter","startBattle","length","drawChallengers","statusPlayerOne","statusPlayerTwo","prepareBattleground","useEffect","Button","onClick","useFetch","url","results","setResults","isLoading","setIsLoading","controller","AbortController","fetchData","fetch","signal","then","res","json","data","next","finally","abort","Spinner","display","justifyContent","CircularProgress","size","CharactersArenaView","CHARACTERS","characters","filteredCharacters","useMemo","filter","character","StarshipsArenaView","STARSHIPS","starships","filteredStarships","starship","Views","path","exact","App","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2f15af4.chunk.js","sourcesContent":["import en from './en';\r\nimport pl from './pl';\r\n\r\nexport default {\r\n    en,\r\n    pl,\r\n};\r\n","import Common from './en/common.json';\r\n\r\nexport default {\r\n    Common,\r\n};\r\n","import Common from './pl/common.json';\r\n\r\nexport default {\r\n    Common,\r\n};\r\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\n\r\nimport locales from './locales/index';\r\n\r\ni18n.use(initReactI18next)\r\n    .use(LanguageDetector)\r\n    .init({\r\n        whitelist: ['en', 'pl'],\r\n        ns: ['Common'],\r\n        defaultNS: 'Common',\r\n        resources: locales,\r\n        fallbackLng: 'en',\r\n        interpolation: {\r\n            escapeValue: false,\r\n        },\r\n    });\r\n","export enum Status {\r\n    WINNER = 'winner',\r\n    LOOSER = 'looser',\r\n    DRAW = 'draw',\r\n}\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport {\r\n    FormControl,\r\n    RadioGroup,\r\n    FormControlLabel,\r\n    Radio,\r\n} from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst ChangeLanguageMenu: React.FC = () => {\r\n    const { i18n } = useTranslation();\r\n    const [selectedLng, setSelectedLng] = useState(i18n.language);\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setSelectedLng(event.target.value);\r\n        i18n.changeLanguage(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <FormControl component=\"fieldset\">\r\n            <RadioGroup\r\n                aria-label=\"position\"\r\n                name=\"position\"\r\n                value={selectedLng}\r\n                onChange={handleChange}\r\n                row\r\n            >\r\n                <FormControlLabel\r\n                    value=\"en\"\r\n                    control={<Radio />}\r\n                    label=\"English\"\r\n                    labelPlacement=\"start\"\r\n                />\r\n                <FormControlLabel\r\n                    value=\"pl\"\r\n                    control={<Radio />}\r\n                    label=\"Polish\"\r\n                    labelPlacement=\"start\"\r\n                />\r\n            </RadioGroup>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport default ChangeLanguageMenu;\r\n","import React from 'react';\r\nimport { AppBar, Box, Toolbar, Typography } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport ChangeLanguageMenu from '../ChangeLanguageMenu/ChangeLanguageMenu';\r\n\r\nconst TopBar: React.FC = () => (\r\n    <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n            <Box flexGrow={1}>\r\n                <Link to=\"/\">\r\n                    <Typography variant=\"h6\" color=\"inherit\">\r\n                        SWAPI Game\r\n                    </Typography>\r\n                </Link>\r\n            </Box>\r\n            <ChangeLanguageMenu />\r\n        </Toolbar>\r\n    </AppBar>\r\n);\r\n\r\nexport default TopBar;\r\n","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\n\r\nimport TopBar from '../TopBar/TopBar';\r\n\r\nconst Layout: React.FC = ({ children }) => {\r\n    return (\r\n        <Box height=\"100vh\">\r\n            <TopBar />\r\n            {children}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","export interface Resource {\r\n    iconSrc: string;\r\n    title: string;\r\n    iconAlt: string;\r\n    redirect: string;\r\n}\r\n\r\nexport const RESOURCES: Resource[] = [\r\n    {\r\n        iconSrc: '/vader.svg',\r\n        title: 'CHARACTERS',\r\n        iconAlt: 'vader',\r\n        redirect: 'characters',\r\n    },\r\n    {\r\n        iconSrc: '/falcon.svg',\r\n        title: 'STARSHIPS',\r\n        iconAlt: 'falcon',\r\n        redirect: 'starships',\r\n    },\r\n];\r\n","import React from 'react';\r\nimport { Typography, Card, CardContent, Grid } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { Resource } from '../../views/HomeView/resources';\r\n\r\nconst ResourceTile: React.FC<ResourceProps> = ({ resource }: ResourceProps) => {\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Card>\r\n            <CardContent>\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item xs={6}>\r\n                        <img\r\n                            width=\"80%\"\r\n                            src={resource.iconSrc}\r\n                            alt={resource.iconAlt}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Typography variant=\"h3\">\r\n                            {t(resource.title)}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\ninterface ResourceProps {\r\n    resource: Resource;\r\n}\r\n\r\nexport default ResourceTile;\r\n","import React from 'react';\r\nimport { Grid, Typography, Box } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { RESOURCES } from './resources';\r\nimport ResourceTile from '../../components/ResourceTile/ResourceTile';\r\n\r\nconst HomeView: React.FC = () => {\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid xs={12} item>\r\n                <Box pb={6} pt={6}>\r\n                    <Typography align=\"center\" variant=\"h2\">\r\n                        {t('CHOOSE_GAME_MODE')}\r\n                    </Typography>\r\n                </Box>\r\n            </Grid>\r\n            <Grid xs={12} item container spacing={2} justify=\"center\">\r\n                {RESOURCES.map(resource => (\r\n                    <Grid key={resource.iconAlt} item xs={4}>\r\n                        <Link to={resource.redirect}>\r\n                            <ResourceTile resource={resource} />\r\n                        </Link>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default HomeView;\r\n","import React from 'react';\r\nimport { Card, CardContent, Grid, Typography, styled } from '@material-ui/core';\r\n\r\nimport { GameStatusPlayer } from '../../interfaces/GameStatusPlayer';\r\nimport { Status } from '../../interfaces/Status';\r\n\r\nconst colors = {\r\n    draw: '#b3b300',\r\n    looser: '#990000',\r\n    winner: '#006400',\r\n};\r\n\r\nconst FullWidthGrid = styled(Grid)({\r\n    width: '100%',\r\n});\r\n\r\nconst StatusTypography = styled(Typography)(\r\n    ({ status }: { status: Status }) => ({\r\n        textTransform: 'uppercase',\r\n        color: colors[status],\r\n    }),\r\n);\r\n\r\nconst RotatedImg = styled('img')({\r\n    transform: 'rotate(45deg)',\r\n});\r\n\r\nconst DetailsTile: React.FC<DetailsTileProps> = ({\r\n    playerStatus,\r\n}: DetailsTileProps) => (\r\n    <Card>\r\n        <CardContent>\r\n            <Grid container alignItems=\"center\" direction=\"column\">\r\n                <Grid item xs={12}>\r\n                    <StatusTypography\r\n                        variant=\"h5\"\r\n                        status={playerStatus.status}\r\n                        data-test=\"status\"\r\n                    >\r\n                        {playerStatus.status}\r\n                    </StatusTypography>\r\n                </Grid>\r\n                <FullWidthGrid item xs={6}>\r\n                    {playerStatus.crew ? (\r\n                        <RotatedImg\r\n                            width=\"100%\"\r\n                            src=\"falcon.svg\"\r\n                            alt=\"falcon\"\r\n                        />\r\n                    ) : (\r\n                        <img width=\"100%\" src=\"vader.svg\" alt=\"vader\" />\r\n                    )}\r\n                </FullWidthGrid>\r\n                <Grid item xs={6}>\r\n                    <Typography data-test=\"details-name\">\r\n                        {playerStatus?.name}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <Typography\r\n                        data-test={`details-${\r\n                            playerStatus.crew ? 'crew' : 'mass'\r\n                        }`}\r\n                    >\r\n                        {playerStatus.crew\r\n                            ? `Crew: ${playerStatus.crew}`\r\n                            : `Mass: ${playerStatus.mass}`}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n        </CardContent>\r\n    </Card>\r\n);\r\n\r\ninterface DetailsTileProps {\r\n    playerStatus: GameStatusPlayer;\r\n}\r\n\r\nexport default DetailsTile;\r\n","export const getRandomInteger = (max: number): number =>\r\n    Math.floor(Math.random() * max);\r\n","export enum ApiUrls {\r\n    CHARACTERS = 'https://swapi.co/api/people/',\r\n    STARSHIPS = 'https://swapi.co/api/starships/',\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Typography } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport DetailsTile from '../../components/DetailsTile/DetailsTile';\r\nimport { Starship } from '../../interfaces/Starship';\r\nimport { Character } from '../../interfaces/Character';\r\nimport { GameStatus } from '../../interfaces/GameStatus';\r\nimport { Status } from '../../interfaces/Status';\r\nimport { Challenger } from '../../interfaces/Challenger';\r\nimport { getRandomInteger } from '../../core/utils';\r\nimport { defineStatusForStarship, defineStatusForCharacter } from './utils';\r\n\r\nconst Battleground: React.FC<BattlegroundProps> = ({\r\n    contestants,\r\n}: BattlegroundProps) => {\r\n    const { t } = useTranslation();\r\n\r\n    const [gameStatus, setGameStatus] = useState<GameStatus>({\r\n        playerOne: {\r\n            name: null,\r\n            status: null,\r\n            mass: null,\r\n            crew: null,\r\n            score: 0,\r\n        },\r\n        playerTwo: {\r\n            name: null,\r\n            status: null,\r\n            mass: null,\r\n            crew: null,\r\n            score: 0,\r\n        },\r\n    });\r\n\r\n    const drawChallengers = (): Challenger[] => {\r\n        const playerOne = getRandomInteger(contestants.length);\r\n        const playerTwo = getRandomInteger(contestants.length);\r\n\r\n        return [contestants[playerOne], contestants[playerTwo]];\r\n    };\r\n\r\n    const defineStatus = (\r\n        firstChallenger: Challenger,\r\n        secondChallenger: Challenger,\r\n    ): Status[] => {\r\n        if ((firstChallenger as Starship).crew) {\r\n            return defineStatusForStarship(\r\n                firstChallenger as Starship,\r\n                secondChallenger as Starship,\r\n            );\r\n        }\r\n\r\n        if ((firstChallenger as Character).mass) {\r\n            return defineStatusForCharacter(\r\n                firstChallenger as Character,\r\n                secondChallenger as Character,\r\n            );\r\n        }\r\n    };\r\n\r\n    const prepareBattleground = (\r\n        firstChallenger: Challenger,\r\n        secondChallenger: Challenger,\r\n    ): void => {\r\n        const [statusPlayerOne, statusPlayerTwo] = defineStatus(\r\n            firstChallenger,\r\n            secondChallenger,\r\n        );\r\n\r\n        setGameStatus({\r\n            playerOne: {\r\n                name: firstChallenger.name,\r\n                status: statusPlayerOne,\r\n                mass: Number((firstChallenger as Character).mass),\r\n                crew: Number((firstChallenger as Starship).crew),\r\n                score:\r\n                    statusPlayerOne !== Status.LOOSER\r\n                        ? gameStatus.playerOne.score + 1\r\n                        : gameStatus.playerOne.score,\r\n            },\r\n            playerTwo: {\r\n                name: secondChallenger.name,\r\n                status: statusPlayerTwo,\r\n                mass: Number((secondChallenger as Character).mass),\r\n                crew: Number((secondChallenger as Starship).crew),\r\n                score:\r\n                    statusPlayerTwo !== Status.LOOSER\r\n                        ? gameStatus.playerTwo.score + 1\r\n                        : gameStatus.playerTwo.score,\r\n            },\r\n        });\r\n    };\r\n\r\n    const startBattle = (): void => {\r\n        const [firstChallenger, secondChallenger] = drawChallengers();\r\n\r\n        prepareBattleground(firstChallenger, secondChallenger);\r\n    };\r\n\r\n    useEffect(() => {\r\n        startBattle();\r\n    }, [contestants]);\r\n\r\n    return (\r\n        <Grid xs={12} item container spacing={2} justify=\"center\">\r\n            <Grid container item xs={12} justify=\"center\">\r\n                <Typography variant=\"h3\" data-test=\"score\">\r\n                    {gameStatus.playerOne.score} : {gameStatus.playerTwo.score}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <DetailsTile playerStatus={gameStatus.playerOne} />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <DetailsTile playerStatus={gameStatus.playerTwo} />\r\n            </Grid>\r\n            <Grid container item xs={12} justify=\"center\">\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={startBattle}\r\n                    data-test=\"play-again\"\r\n                >\r\n                    {t('PLAY_AGAIN')}\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\ninterface BattlegroundProps {\r\n    contestants: Challenger[];\r\n}\r\n\r\nexport default Battleground;\r\n","import { Status } from '../../interfaces/Status';\r\nimport { Starship } from '../../interfaces/Starship';\r\nimport { Character } from '../../interfaces/Character';\r\n\r\nexport const defineStatusForStarship = (\r\n    firstChallenger: Starship,\r\n    secondChallenger: Starship,\r\n): Status[] => {\r\n    if (Number(firstChallenger.crew) === Number(secondChallenger.crew)) {\r\n        return [Status.DRAW, Status.DRAW];\r\n    }\r\n\r\n    return Number(firstChallenger.crew) > Number(secondChallenger.crew)\r\n        ? [Status.WINNER, Status.LOOSER]\r\n        : [Status.LOOSER, Status.WINNER];\r\n};\r\n\r\nexport const defineStatusForCharacter = (\r\n    firstChallenger: Character,\r\n    secondChallenger: Character,\r\n): Status[] => {\r\n    if (Number(firstChallenger.mass) === Number(secondChallenger.mass)) {\r\n        return [Status.DRAW, Status.DRAW];\r\n    }\r\n\r\n    return Number(firstChallenger.mass) > Number(secondChallenger.mass)\r\n        ? [Status.WINNER, Status.LOOSER]\r\n        : [Status.LOOSER, Status.WINNER];\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst fetchData = <T>(\r\n    url: string,\r\n    controller: AbortController,\r\n    results: T[] = [],\r\n): Promise<T[]> =>\r\n    fetch(url, { signal: controller.signal })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data?.next) {\r\n                return fetchData(data.next, controller, [\r\n                    ...results,\r\n                    ...data?.results,\r\n                ]);\r\n            }\r\n\r\n            return [...results, ...data?.results];\r\n        });\r\n\r\nexport const useFetch = <T>(url: string): [T[], boolean] => {\r\n    const [results, setResults] = useState<T[]>([]);\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const controller = new AbortController();\r\n\r\n    useEffect(() => {\r\n        fetchData<T>(url, controller)\r\n            .then(data => setResults(data))\r\n            .finally(() => {\r\n                setIsLoading(false);\r\n            });\r\n\r\n        return (): void => controller.abort();\r\n    }, [url]);\r\n\r\n    return [results, isLoading];\r\n};\r\n","import React from 'react';\r\nimport { CircularProgress, Box } from '@material-ui/core';\r\n\r\nconst Spinner: React.FC = () => (\r\n    <Box\r\n        display=\"flex\"\r\n        height=\"calc(100vh - 48px)\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n    >\r\n        <CircularProgress size={70} />\r\n    </Box>\r\n);\r\n\r\nexport default Spinner;\r\n","import React, { useMemo } from 'react';\r\nimport { Grid, Typography, Box } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Battleground from '../../components/Battleground/Battleground';\r\nimport { useFetch } from '../../hooks/useFetch';\r\nimport { Character } from '../../interfaces/Character';\r\nimport { ApiUrls } from '../../core/urls/ApiUrls';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\n\r\nconst CharactersArenaView: React.FC = () => {\r\n    const [characters, isLoading] = useFetch<Character>(ApiUrls.CHARACTERS);\r\n    const { t } = useTranslation();\r\n\r\n    const filteredCharacters = useMemo(() => {\r\n        return characters.filter(character => character.mass !== 'unknown');\r\n    }, [characters]);\r\n\r\n    if (isLoading) {\r\n        return <Spinner />;\r\n    }\r\n\r\n    return (\r\n        <Grid container direction=\"column\">\r\n            <Grid item xs={12}>\r\n                <Box pt={6} pb={6}>\r\n                    <Typography align=\"center\" variant=\"h2\">\r\n                        {t('CHARACTERS_ARENA')}\r\n                    </Typography>\r\n                </Box>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Battleground contestants={filteredCharacters} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default CharactersArenaView;\r\n","import React, { useMemo } from 'react';\r\nimport { Grid, Typography, Box } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Battleground from '../../components/Battleground/Battleground';\r\nimport { useFetch } from '../../hooks/useFetch';\r\nimport { Starship } from '../../interfaces/Starship';\r\nimport { ApiUrls } from '../../core/urls/ApiUrls';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\n\r\nconst StarshipsArenaView: React.FC = () => {\r\n    const [starships, isLoading] = useFetch<Starship>(ApiUrls.STARSHIPS);\r\n    const { t } = useTranslation();\r\n\r\n    const filteredStarships = useMemo(() => {\r\n        return starships.filter(starship => starship.crew !== 'unknown');\r\n    }, [starships]);\r\n\r\n    if (isLoading) {\r\n        return <Spinner />;\r\n    }\r\n\r\n    return (\r\n        <Grid container direction=\"column\">\r\n            <Grid item xs={12}>\r\n                <Box pt={6} pb={6}>\r\n                    <Typography align=\"center\" variant=\"h2\">\r\n                        {t('STARSHIPS_ARENA')}\r\n                    </Typography>\r\n                </Box>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Battleground contestants={filteredStarships} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default StarshipsArenaView;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nimport Layout from '../components/Layout/Layout';\r\nimport HomeView from './HomeView/HomeView';\r\nimport CharactersArenaView from './CharactersArenaView/CharactersArenaView';\r\nimport StarshipsArenaView from './StarshipsArenaView/StarshipsArenaView';\r\n\r\nconst Views: React.FC = () => (\r\n    <Layout>\r\n        <Switch>\r\n            <Route path=\"/characters\">\r\n                <CharactersArenaView />\r\n            </Route>\r\n            <Route path=\"/starships\">\r\n                <StarshipsArenaView />\r\n            </Route>\r\n            <Route path=\"/\" exact>\r\n                <HomeView />\r\n            </Route>\r\n            <Route path=\"*\">\r\n                <Redirect to=\"/\" />\r\n            </Route>\r\n        </Switch>\r\n    </Layout>\r\n);\r\n\r\nexport default Views;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport './core/i18n/i18n';\r\nimport Views from './views/Views';\r\n\r\nconst App: React.FC = () => (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n        <Views />\r\n    </Router>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n        ),\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.',\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}